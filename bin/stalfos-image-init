#!/bin/bash                                                                                                                                                            

# README
#   Run script with args.

# TODO: Avoid creating files as root, by using uid/gid mappings.
# TODO: Rewrite in not-bash.
# TODO: Cleanup all bad state on failure.

set -eu
set -o pipefail

exit_hooks=()
error_hooks=()

hooks_prepend() {
    local -n hooks="${1}_hooks"
    shift

    hooks=("$@" "${hooks[@]}")
}

hooks_run() {
    local -n hooks="${1}_hooks"
    local cmd

    for cmd in "${hooks[@]}"; do
        "${cmd[@]}"
    done
}

hook_rm_img() {
    if [[ -f "$stalfos_img" ]]; then
        log "failure-cleanup: rm $stalfos_img"
        rm -f -- "$stalfos_img"
    fi
}

hook_rm_chroot() {
    # omg i hate bash
    
    if silent mountpoint "$stalfos_img_chroot"; then
        sudo umount --recursive "$stalfos_img_chroot"
    fi

    if [[ -d "$stalfos_img_chroot" ]]; then
        sudo rmdir "$stalfos_img_chroot"
    fi
}

silent() {
    "$@" >&/dev/null
}

log() {
    echo >&2 "stalfos: $*"
}

die() {
    if [[ "$#" ]]; then
        log "error: $*"
    fi

    exit 1
}

require_cmd() {
    if ! silent which "$1"; then
        die "required command is missing: $1"
    fi
}

nspawn() {
    sudo systemd-nspawn \
        --image="$stalfos_img" \
        --bind="$pacman_cache_dir:/var/cache/pacman" \
        -- "$@"
}

nspawn_sh() {
    # Spawn a shell with sane error handling
    nspawn bash -c "set -eu; set -o pipefail; $1"
}

pacman_refresh_once_flag=0
pacman_refresh_once() {
    if ((pacman_refresh_once_flag)); then
        return 0
    fi

    nspawn pacman -Sy
    pacman_refresh_once_flag=1
}


die_if_file_exists() {
    if [[ -e "$1" ]]; then
        die "file exists: $1"
    fi
}

get_arch_kver() {
    nspawn pacman -Qi linux \
        | col \
        | sed -n -e 's/^Version\s*:\s*//p' \
        | sed -e 's/\.arch/-arch/'
}

# unused
get_arch_kernel() {
    local kver

    kver=$(get_arch_kver)
    sudo cp -a "$stalfos_img_chroot/lib/modules/$kver/vmlinuz" \
               "$stalfos_top/vmlinuz-$kver"
    ln -sT "$stalfos_top/vmlinuz-$kver" \
           "$stalfos_top/vmlinuz"
}

# unused
get_arch_initrd() {
    local kver
    kver=$(get_arch_kver)
    local fname="initramfs-$kver.img"

    nspawn dracut --kver="$kver"
    sudo mv "$stalfos_img_chroot/boot/$fname" "$stalfos_top/"
    ln -sT "$stalfos_top/$fname" "$stalfos_top/initrd"
}

trap 'hooks_run exit' EXIT
trap 'hooks_run error' ERR

script_name='stalfos-image-init'
stalfos_bin_dir=$(realpath -s -- "$(dirname -- "$BASH_SOURCE")")
stalfos_top=$(dirname -- "$stalfos_bin_dir")

if (($#)); then
    echo >&2 "usage error: $script_name takes no args"
    exit 1
fi

euid=$(id -u)
if [[ "$euid" = 0 ]]; then
    die "must not run as root"
fi

source "$stalfos_top/config/config.bash"

stalfos_img="$stalfos_top/stalfos.img"
stalfos_img_chroot="${stalfos_img}.d"
pacman_cache_dir="$STALFOS_CACHE_DIR/pacman"
bootstrap_img="$STALFOS_CACHE_DIR/archlinux-bootstrap-x86_64.tar.gz"

die_if_file_exists "$stalfos_img"
die_if_file_exists "$stalfos_img_chroot"

# Require some non-universal commands
require_cmd mkfs.ext4
require_cmd sponge
require_cmd systemd-nspawn
require_cmd wget

# Init the cache
mkdir -p -- "$STALFOS_CACHE_DIR"
sudo mkdir -p -- "$pacman_cache_dir"

log "download bootstrap image"
# Compare local timestamp against server timestamp, so that wget always fetches
# the latest image.
wget --timestamping \
     --show-progress \
     -P "$(dirname -- "$bootstrap_img")" \
     "$STALFOS_ARCH_MIRROR/iso/latest/archlinux-bootstrap-x86_64.tar.gz"

log "create disk image"
truncate -s "$STALFOS_DISK_SIZE" "$stalfos_img"
hooks_prepend error hook_rm_img
mkfs.ext4 -L stalfos "$stalfos_img"

log "mount disk image to chroot"
sudo mkdir -- "$stalfos_img_chroot"
hooks_prepend exit hook_rm_chroot
sudo mount -- "$stalfos_img" "$stalfos_img_chroot"

log "unpack bootstrap image into chroot"
sudo tar -C "$stalfos_img_chroot" \
    --numeric-owner \
    --strip-components=1 \
    -xf "$bootstrap_img"

# Clean up bootstrap build info
sudo rm -f "$stalfos_img_chroot/root/version"
sudo mv "$stalfos_img_chroot/pkglist.x86_64.txt" \
        "$stalfos_img_chroot/etc/pacman.d/bootstrap.pkglist"

log "install config files into chroot"
find "$stalfos_top/config/rootfs" -type f -printf '%P\0' \
| while read -r -d '' x; do
    # TODO: Be smarter about file perms and owner
    sudo install -TD -m644 \
        "$stalfos_top/config/rootfs/$x" \
        "$stalfos_img_chroot/$x"
done

log "authorize ssh chromiumos test keys for root login"
sudo install -d -m700 "$stalfos_img_chroot/root/.ssh"
cat "$stalfos_top/misc/ssh/chromiumos_test_rsa.pub" \
    | sudo sponge -a "$stalfos_img_chroot/root/.ssh/authorized_keys"
sudo chmod 600 "$stalfos_img_chroot/root/.ssh/authorized_keys"

log "unmount chroot"
sudo umount "$stalfos_img_chroot"
sudo rmdir "$stalfos_img_chroot"

log "set root password"
if [[ -z "$STALFOS_ROOT_PASSWD" ]]; then
    die 'STALFOS_ROOT_PASSWD is empty'
fi
nspawn_sh "chpasswd <<<'root:$STALFOS_ROOT_PASSWD'"

log "init pacman keyring"
nspawn pacman-key --init
nspawn pacman-key --populate

if [[ "$STALFOS_PACMAN_REFLECTOR_ENABLE" -eq 1 ]]; then
    log "init pacman mirror list"
    pacman_refresh_once
    nspawn pacman -S --noconfirm --needed reflector
    nspawn_sh "reflector --fastest 8 -p https -c '$STALFOS_PACMAN_REFLECTOR_COUNTRIES' --save=/etc/pacman.d/mirrorlist"
fi

log "install pacman packages"
pacman_refresh_once
nspawn_sh "pacman -S --noconfirm --needed \$(sed 's/#.*//' /etc/pacman.d/stalfos.pkglist)"

log "setup systemd units"
nspawn systemctl set-default multi-user.target
nspawn systemctl enable systemd-networkd.service
nspawn systemctl enable sshd.service

log "done creating image"
